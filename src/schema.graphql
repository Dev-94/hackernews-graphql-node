type Query {
    info: String!
    feed(filter: String, skip: Int, take: Int, orderBy: LinkOrderByInput): [Link!]!
  # Fetch a single link by its `id`
    link(id: ID!): Link
}

type Mutation {
    post(url: String!, description: String!): Link!
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    vote(linkId: ID!): Vote

  # Update a link
    updateLink(id: ID!, url: String, description: String): Link

  # Delete a link
    deleteLink(id: ID!): Link
}

type Link {
    id: ID!
    description: String!
    url: String!
    postedBy: User
    votes: [Vote!]!
}

type AuthPayload {
  token: String
  user: User
}

type User {
    id: ID!
    name: String!
    email: String!
    links: [Link!]!
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

input LinkOrderByInput {
  description: Sort
  url: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}

# mutation {
#   post(url: "www.prisma.io", description: "Prisma replaces traditional ORMs") {
#     id
#   }
# }

# mutation {
#   updateLink(id: "link-1", url: "www.bloggingtheboys.com", description: "replaced!") {
#     id
#   }
# }

# mutation {
#     deleteLink(id: "link-2") {
#     id
#   }
# }